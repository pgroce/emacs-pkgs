#+STYLE: <link rel="stylesheet" type="text/css" href="style.css">
#+STARTUP: indent
#+TITLE: pm: Project management

This is how I manage the projects I work on.

* Tasks

I'm putting some tasks here as an example.

** Do a big thing
Do something that involves lots of smaller tasks getting done.
*** DONE Smaller thing 1
:LOGBOOK:
- State "DONE"       from "DOING"      [2021-07-30 Fri 09:53] \\
  Smaller thing 1 done! Results sent to *someone*.
:END:
*** DONE Smaller thing 2
:LOGBOOK:
- State "DONE"       from "DOING"      [2021-08-06 Fri 09:55] \\
  Smaller thing 2 finished, and sent off to customer.
:END:
** On the horizon
*** TODO Do the laundry
This will never get done....
*** DONE Eat breakfast
Done, but hardly an accomplishment




* Code

** Exploration

Flow to determine if a headline with :todo-keyword of "DONE" is an accomplishment:

- [Has a logbook]
  - For each item in logbook:
    - [Has the form «State "DONE" *from "DOING" *»]



#+begin_src emacs-lisp :results raw verbatim




  (defun pg-pm--has-logbook (headline)
    (org-ml-headline-get-logbook-items config))


  (defun pg-pm--is-resolved-item (logbook-items)
    (->> logbook-items
         ))

  (defun pg-pm--is-resolved (headline)
      (->> headline
           (org-ml-headline-get-logbook-items config)
           (org-ml-item-get-paragraph)))







#+end_src

This gets me to headlines that are resolved DONE.

#+begin_src  emacs-lisp :results raw verbatim
  (->> (org-ml-parse-subtrees 'all)
       (org-ml-match '(:any * (:todo-keyword "DONE")))
       car)
#+end_src

To make sure I have an Accomplishment (queue harp glissando), I need to make sure it was resolved DONE since some date. To start at that, I need to get the logbook for the entry.

#+begin_src  emacs-lisp :results raw verbatim
  (let ((config (list :log-into-drawer "LOGBOOK" :clock-into-drawer t)))
      (->> (org-ml-parse-subtrees 'all)
           (org-ml-match '(:any * (:todo-keyword "DONE")))
           (--map (org-ml-headline-get-logbook-items config it))))
#+end_src

Now I have a list of lists of elements. Seems like a good time for a function.

My logging config may change, so let's make it a custom.


#+begin_src  emacs-lisp :noweb-ref resolved-logbook-items :results none
  (defcustom pg-pm-project-file-logging-config
    '(:log-into-drawer "LOGBOOK" :clock-into-drawer t)
    "Logging format for drawers in project files.")


  (defun pg-pm--resolved-logbook-items (nodes)
    (let ((config pg-pm-project-file-logging-config))
      (->> nodes
           (org-ml-match '(:any * (:todo-keyword "DONE")))
           (--map (org-ml-headline-get-logbook-items config it)))))

#+end_src


Proof that the above works:

#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>
  (pg-pm--resolved-logbook-items (org-ml-parse-subtrees 'all))
#+end_src

Anyhoo, I only care about the items in the item lists that represent resolving the item to DONE.

BTW, this is the template for resolution log items:

#+begin_src emacs-lisp :results none
  "State %-12s from %-12S %t"
#+end_src

Then there's an optional line break and any additional information the user supplies.

A brief exploration of the structure of the logbook item. Each one starts with a paragraph object:

#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>
  (let* ((objects (->> (org-ml-parse-subtrees 'all)
                       (pg-pm--resolved-logbook-items)
                       ;; Get the first set of logbook items
                       (car)
                       ;; Get the first item in the list of items
                       (car)
                       ;; Get the children of this item's paragraph (poorly named function, this)
                       (org-ml-item-get-paragraph))))
    objects)
#+end_src

If it's the resolution item, the first paragraph will look like the above template.

#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>
  (let* ((resolve-regex (rx "State"
                            (+ whitespace)
                            "\"DONE\""
                            (+ whitespace)
                            "from"
                            (+ whitespace)
                            "\"" (+ (not "\"")) "\"" ))
         (objects (->> (org-ml-parse-subtrees 'all)
                       (pg-pm--resolved-logbook-items)
                       ;; Get the first set of logbook items
                       (car)
                       ;; Get the first item in the list of items
                       (car)
                       ;; Get the children of this item's paragraph (poorly named function, this)
                       (org-ml-item-get-paragraph)))
         (res? (->> (car objects)
                    (org-ml-to-trimmed-string)
                    (string-match-p resolve-regex))))
    (if res? t nil))
#+end_src

The next object after the resolution declaration will be the timestamp. Unless this entry is squirrelly, so we test that it's a timestamp anyway.

#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>
  (let* ((resolve-regex (rx "State"
                            (+ whitespace)
                            "\"DONE\""
                            (+ whitespace)
                            "from"
                            (+ whitespace)
                            "\"" (+ (not "\"")) "\"" ))
         (objects (->> (org-ml-parse-subtrees 'all)
                       (pg-pm--resolved-logbook-items)
                       ;; Get the first set of logbook items
                       (car)
                       ;; Get the first item in the list of items
                       (car)
                       ;; Get the children of this item's paragraph (poorly named function, this)
                       (org-ml-item-get-paragraph)))
         (res? (->> (car objects)
                    (org-ml-to-trimmed-string)
                    (string-match-p resolve-regex))))
    (when res?
      (let ((ts (--> (cadr objects)
                     (when (org-ml-is-type 'timestamp it) it))))
        ts)))
#+end_src

The remaining objects should be a line break, followed by user nonsense. (Valuable nonsense, it's going to be the description of the accomplishment.)

#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>
  (let* ((resolve-regex (rx "State"
                            (+ whitespace)
                            "\"DONE\""
                            (+ whitespace)
                            "from"
                            (+ whitespace)
                            "\"" (+ (not "\"")) "\"" ))
         (objects (->> (org-ml-parse-subtrees 'all)
                       (pg-pm--resolved-logbook-items)
                       ;; Get the first set of logbook items
                       (car)
                       ;; Get the first item in the list of items
                       (car)
                       ;; Get the children of this item's paragraph (poorly named function, this)
                       (org-ml-item-get-paragraph)))
         (res? (->> (car objects)
                    (org-ml-to-trimmed-string)
                    (string-match-p resolve-regex))))
    (when res?
      (let ((ts   (--> (cadr objects)
                       (when (org-ml-is-type 'timestamp it) it)))
            (addl (caddr objects)))
        (org-ml-get-type addl))))
#+end_src

If it is a line break, get everything after it. If it isn't, assume there was no additional material. Bummer.

#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>
  (let* ((resolve-regex (rx "State"
                            (+ whitespace)
                            "\"DONE\""
                            (+ whitespace)
                            "from"
                            (+ whitespace)
                            "\"" (+ (not "\"")) "\"" ))
         (objects (->> (org-ml-parse-subtrees 'all)
                       (pg-pm--resolved-logbook-items)
                       ;; Get the first set of logbook items
                       (car)
                       ;; Get the first item in the list of items
                       (car)
                       ;; Get the children of this item's paragraph (poorly named function, this)
                       (org-ml-item-get-paragraph)))
         (res? (->> (car objects)
                    (org-ml-to-trimmed-string)
                    (s-matches? resolve-regex))))
    (when res?
      (let ((ts   (--> (cadr objects)
                       (when (org-ml-is-type 'timestamp it) it)))
            (addl (--> (caddr objects)
                       (when (org-ml-is-type 'line-break it)
                         (s-join "" (-map #'org-ml-to-trimmed-string (cdddr objects)))))))
        (list ts addl))))
#+end_src


Huzzah, this is what we wanted to get out of the logbook items! Turn this into a function.


#+begin_src emacs-lisp :noweb-ref logbook-resolution :results raw verbatim
  (defconst pg-pm--rx-logbook-resolved
    (rx "State"
        (+ whitespace)
        "\"DONE\""
        (+ whitespace)
        "from"
        (+ whitespace)
        "\"" (+ (not "\"")) "\"" )
    "Regex matching the transition to the DONE state, per the
    default state format string in
    `org-log-note-headings'. Capturing accomplishments will break
    if that entry in `org-log-note-headings' is changed. (As will large chunks of
    org-agenda.)")



  (defun pg-pm--logbook-resolution? (logbook-item)
    "If LOGBOOK-ITEM is an entry that signals the resolution of a
    to-do item, return the timestamp of the resolution and any
    additional information provided about it. If this set of
    logbook items does not contain a resolution, return
    nil. LOGBOOK-ITEMS should be a single item from a logbook.

  A resolution is defined as a state transition to \"DONE\". This
  function relies on the format of te state change entry being
  consistent with the default value of the state entry in
  `org-log-note-headings'. If that variable is changed for some
  reason, `pg-pm--rx-logbook-resolved' can be changed to properly
  identify resolutions."
    (let* ((objects (org-ml-item-get-paragraph logbook-item))
           (res? (->> (car objects)
                      (org-ml-to-trimmed-string)
                      (s-matches? pg-pm--rx-logbook-resolved))))
      (when res?
        (let ((ts   (--> (cadr objects)
                         (when (org-ml-is-type 'timestamp it) it)))
              (addl (--> (caddr objects)
                         (when (org-ml-is-type 'line-break it)
                           (s-join "" (-map #'org-ml-to-trimmed-string (cdddr objects)))))))
          (list ts addl)))))
#+end_src


Let's test this function in the by-now time-honored way. (Untested, will eat your dog.)

#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>
  <<logbook-resolution>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--resolved-logbook-items)
       (--map (-map #'pg-pm--logbook-resolution? it)))
#+end_src

You'll notice that the map above returns a list for each headline; we can clean that up a bit.

#+begin_src emacs-lisp :noweb yes
  <<resolved-logbook-items>>
  <<logbook-resolution>>

  (defun pg-pm--resolved-logbook-item (headline)
    "If HEADLINE has a logbook and that logbook contains an item
    indicating that it was resolved to the DONE status, return a
    three-element list containing the headline, the timestamp
    indicating when the headline was set to DONE, and any note that
    may have been left when the transition was made. If not, return
    nil.

  If more than one resolved logbook item exists for this headline,
  return the first."
    (let* ((resolved-items
            (->> (org-ml-headline-get-logbook-items
                  pg-pm-project-file-logging-config
                  headline)
                 (map #'pg-pm--logbook-resolution?)
                 (-keep #'identity))))
      (-when-let (((ts note) (first resolved-items)))
        (list headline ts note))))



  (->> (org-ml-parse-subtrees 'all)
       (-map #'pg-pm--resolved-logbook-item))

#+end_src


#+RESULTS:



#+begin_src emacs-lisp :noweb-ref logbook-resolved-item :results raw verbatim
  (defun pg-pm--logbook-has-resolution-item? (logbook-items)
    "Given a list of LOGBOOK-ITEMS, either return the item
    representing the resolution to DONE, or nil if no such item
    exists."
    (let ((proc (lambda (item)
                  (->> item
                       (org-ml-item-get-paragraph)
                       ))))))

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--resolved-logbook-items)
       (-map #'pg-pm--logbook-has-resolution-item?))
#+end_src



#+begin_src emacs-lisp :noweb yes :results raw verbatim
  <<resolved-logbook-items>>

#+end_src


** Reboot 1

Right, that was shit, wasn't it? Let's make it not shit.

*** Selecting headlines
Keeping this initial selection of =DONE= headlines.

#+begin_src  emacs-lisp :results code
  (let ((config (list :log-into-drawer "LOGBOOK" :clock-into-drawer t)))
      (->> (org-ml-parse-subtrees 'all)
           (org-ml-match '(:any * (:todo-keyword "DONE")))
           (--map (org-ml-headline-get-logbook-items config it))))
#+end_src


Let's pull apart this functionality. First: finding finished tasks.

#+begin_src emacs-lisp :noweb-ref finished-tasks
  (defun pg-pm--finished-tasks (node)
    "Return nodes for all tasks under NODE with the keyword DONE.

  As a practical matter, NODE can be a list of subtrees (i.e., the
  return value of `org-ml-parse-subtrees')"
    (org-ml-match '(:any * (:todo-keyword "DONE")) node))
#+end_src

Next, pulling off logbook items. This may get consolidated into the logbook entry processing below....

#+begin_src emacs-lisp :noweb-ref headline-logbook-items
  (defcustom pg-pm-project-file-logging-config
    '(:log-into-drawer "LOGBOOK" :clock-into-drawer t)
    "Logging format for drawers in project files.")


  (defun pg-pm--headline-logbook-items (headline)
    "Use `org-ml-headline-get-logbook-items' to pull logbook items
  off HEADLINE."
    (org-ml-headline-get-logbook-items
     pg-pm-project-file-logging-config
     headline))
#+end_src


Let's test this out

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (-map #'pg-pm--headline-logbook-items))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
  (((item
     (:bullet "- " :begin 333 :end 449 :contents-begin 335 :contents-end 449 :checkbox nil :counter nil :structure
              ((333 0 "- " nil nil nil 449))
              :pre-blank 0 :post-blank 0 :post-affiliated 333 :tag nil :parent
              (...))
     (paragraph
      (:begin 335 :end 449 :contents-begin 335 :contents-end 449 :post-blank 0 :post-affiliated 335 :parent
              (...))
      #("State \"DONE\"       from \"DOING\"      " 0 37
        (:parent #3))
      (timestamp
       (:type inactive :raw-value "[2021-07-30 Fri 09:53]" :year-start 2021 :month-start 7 :day-start 30 :hour-start 9 :minute-start 53 :year-end 2021 :month-end 7 :day-end 30 :hour-end 9 :minute-end 53 :begin 372 :end 395 :post-blank 1 :parent #3))
      (line-break
       (:begin 395 :end 398 :post-blank 0 :parent #3))
      #("  Smaller thing 1 done! Results sent to " 0 40
        (:parent #3))
      (bold
       (:begin 438 :end 447 :contents-begin 439 :contents-end 446 :post-blank 0 :parent #3)
       #("someone" 0 7
         (:parent #4)))
      #(".\n" 0 2
        (:parent #3)))))
   ((item
     (:bullet "- " :begin 490 :end 609 :contents-begin 492 :contents-end 609 :checkbox nil :counter nil :structure
              ((490 0 "- " nil nil nil 609))
              :pre-blank 0 :post-blank 0 :post-affiliated 490 :tag nil :parent
              (...))
     (paragraph
      (:begin 492 :end 609 :contents-begin 492 :contents-end 609 :post-blank 0 :post-affiliated 492 :parent
              (...))
      #("State \"DONE\"       from \"DOING\"      " 0 37
        (:parent #3))
      (timestamp
       (:type inactive :raw-value "[2021-08-06 Fri 09:55]" :year-start 2021 :month-start 8 :day-start 6 :hour-start 9 :minute-start 55 :year-end 2021 :month-end 8 :day-end 6 :hour-end 9 :minute-end 55 :begin 529 :end 552 :post-blank 1 :parent #3))
      (line-break
       (:begin 552 :end 555 :post-blank 0 :parent #3))
      #("  Smaller thing 2 finished, and sent off to customer.\n" 0 54
        (:parent #3)))))
   nil)
#+end_src



*** Tracking state transitions

The old solution for identifying when a headline was resolved as =DONE= and what notes were provided:

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>

  (defconst pg-pm--rx-logbook-resolved-old
    (rx "State"
        (+ whitespace)
        "\"DONE\""
        (+ whitespace)
        "from"
        (+ whitespace)
        "\"" (+ (not "\"")) "\"" )
    "Regex matching the transition to the DONE state, per the
    default state format string in
    `org-log-note-headings'. Capturing accomplishments will break
    if that entry in `org-log-note-headings' is changed. (As will large chunks of
    org-agenda.)")



  (defun pg-pm--logbook-resolution? (logbook-item)
    "If LOGBOOK-ITEM is an entry that signals the resolution of a
    to-do item, return the timestamp of the resolution and any
    additional information provided about it. If this set of
    logbook items does not contain a resolution, return
    nil. LOGBOOK-ITEMS should be a single item from a logbook.

  A resolution is defined as a state transition to \"DONE\". This
  function relies on the format of te state change entry being
  consistent with the default value of the state entry in
  `org-log-note-headings'. If that variable is changed for some
  reason, `pg-pm--rx-logbook-resolved' can be changed to properly
  identify resolutions."
    (let* ((objects (org-ml-item-get-paragraph logbook-item))
           (res? (->> (car objects)
                      (org-ml-to-trimmed-string)
                      (s-matches? pg-pm--rx-logbook-resolved-old))))
      (when res?
        (let ((ts   (--> (cadr objects)
                         (when (org-ml-is-type 'timestamp it) it)))
              (addl (--> (caddr objects)
                         (when (org-ml-is-type 'line-break it)
                           (s-join "" (-map #'org-ml-to-trimmed-string (cdddr objects)))))))
          (list ts addl)))))

  ;; Used like this

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (-map #'pg-pm--headline-logbook-items)
       (first)
       (first))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
(item
 (:bullet "- " :begin 333 :end 449 :contents-begin 335 :contents-end 449 :checkbox nil :counter nil :structure
          ((333 0 "- " nil nil nil 449))
          :pre-blank 0 :post-blank 0 :post-affiliated 333 :tag nil :parent
          (plain-list
           (:type unordered :begin 333 :end 449 :contents-begin 333 :contents-end 449 :structure
                  ((333 0 "- " nil nil nil 449))
                  :post-blank 0 :post-affiliated 333 :parent
                  (drawer
                   (:begin 323 :end 455 :drawer-name "LOGBOOK" :contents-begin 333 :contents-end 449 :post-blank 0 :post-affiliated 323 :parent
                           (section
                            (:begin 323 :end 455 :contents-begin 323 :contents-end 455 :post-blank 0 :post-affiliated 323 :parent
                                    (headline
                                     (:raw-value "Smaller thing 1" :begin 298 :end 455 :pre-blank 0 :contents-begin 323 :contents-end 455 :level 3 :priority nil :tags nil :todo-keyword
                                                 #("DONE" 0 4
                                                   (fontified t face org-done line-prefix
                                                              #("**" 0 2
                                                                (face org-indent))
                                                              wrap-prefix
                                                              #("***** " 0 2
                                                                (face org-indent)
                                                                2 6
                                                                (face org-indent))))
                                                 :todo-type done :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 298 :title
                                                 (#("Smaller thing 1" 0 15
                                                    (:parent #8)))
                                                 :parent
                                                 (headline
                                                  (:raw-value "Do a big thing" :begin 217 :end 615 :pre-blank 0 :contents-begin 235 :contents-end 615 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 217 :title
                                                              (#("Do a big thing" 0 14
                                                                 (:parent #10)))
                                                              :parent
                                                              (headline
                                                               (:raw-value "Tasks" :begin 164 :end 748 :pre-blank 1 :contents-begin 173 :contents-end 744 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 4 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 164 :title
                                                                           (#("Tasks" 0 5
                                                                              (:parent #12)))
                                                                           :parent nil)
                                                               (section
                                                                (:begin 173 :end 217 :contents-begin 173 :contents-end 216 :post-blank 1 :post-affiliated 173 :parent #12)
                                                                (paragraph
                                                                 (:begin 173 :end 216 :contents-begin 173 :contents-end 216 :post-blank 0 :post-affiliated 173 :parent #13)
                                                                 #("I'm putting some tasks here as an example.\n" 0 43
                                                                   (:parent #14))))
                                                               #10
                                                               (headline
                                                                (:raw-value "On the horizon" :begin 615 :end 744 :pre-blank 0 :contents-begin 633 :contents-end 744 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 615 :title
                                                                            (#("On the horizon" 0 14
                                                                               (:parent #13)))
                                                                            :parent #12)
                                                                (headline
                                                                 (:raw-value "Do the laundry" :begin 633 :end 686 :pre-blank 0 :contents-begin 657 :contents-end 686 :level 3 :priority nil :tags nil :todo-keyword
                                                                             #("TODO" 0 4
                                                                               (fontified t line-prefix
                                                                                          #("**" 0 2
                                                                                            (face org-indent))
                                                                                          wrap-prefix
                                                                                          #("***** " 0 2
                                                                                            (face org-indent)
                                                                                            2 6
                                                                                            (face org-indent))
                                                                                          face org-todo))
                                                                             :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 633 :title
                                                                             (#("Do the laundry" 0 14
                                                                                (:parent #14)))
                                                                             :parent #13)
                                                                 (section
                                                                  (:begin 657 :end 686 :contents-begin 657 :contents-end 686 :post-blank 0 :post-affiliated 657 :parent #14)
                                                                  (paragraph
                                                                   (:begin 657 :end 686 :contents-begin 657 :contents-end 686 :post-blank 0 :post-affiliated 657 :parent #15)
                                                                   #("This will never get done....\n" 0 29
                                                                     (:parent #16)))))
                                                                (headline
                                                                 (:raw-value "Eat breakfast" :begin 686 :end 744 :pre-blank 0 :contents-begin 709 :contents-end 744 :level 3 :priority nil :tags nil :todo-keyword
                                                                             #("DONE" 0 4
                                                                               (fontified t line-prefix
                                                                                          #("**" 0 2
                                                                                            (face org-indent))
                                                                                          wrap-prefix
                                                                                          #("***** " 0 2
                                                                                            (face org-indent)
                                                                                            2 6
                                                                                            (face org-indent))
                                                                                          face org-done))
                                                                             :todo-type done :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 686 :title
                                                                             (#("Eat breakfast" 0 13
                                                                                (:parent #14)))
                                                                             :parent #13)
                                                                 (section
                                                                  (:begin 709 :end 748 :contents-begin 709 :contents-end 744 :post-blank 4 :post-affiliated 709 :parent #14)
                                                                  (paragraph
                                                                   (:begin 709 :end 744 :contents-begin 709 :contents-end 744 :post-blank 0 :post-affiliated 709 :parent #15)
                                                                   #("Done, but hardly an accomplishment\n" 0 35
                                                                     (:parent #16))))))))
                                                  (section
                                                   (:begin 235 :end 298 :contents-begin 235 :contents-end 298 :post-blank 0 :post-affiliated 235 :parent #10)
                                                   (paragraph
                                                    (:begin 235 :end 298 :contents-begin 235 :contents-end 298 :post-blank 0 :post-affiliated 235 :parent #11)
                                                    #("Do something that involves lots of smaller tasks getting done.\n" 0 63
                                                      (:parent #12))))
                                                  #8
                                                  (headline
                                                   (:raw-value "Smaller thing 2" :begin 455 :end 615 :pre-blank 0 :contents-begin 480 :contents-end 615 :level 3 :priority nil :tags nil :todo-keyword
                                                               #("DONE" 0 4
                                                                 (fontified t face org-done line-prefix
                                                                            #("**" 0 2
                                                                              (face org-indent))
                                                                            wrap-prefix
                                                                            #("***** " 0 2
                                                                              (face org-indent)
                                                                              2 6
                                                                              (face org-indent))))
                                                               :todo-type done :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 455 :title
                                                               (#("Smaller thing 2" 0 15
                                                                  (:parent #11)))
                                                               :parent #10)
                                                   (section
                                                    (:begin 480 :end 615 :contents-begin 480 :contents-end 615 :post-blank 0 :post-affiliated 480 :parent #11)
                                                    (drawer
                                                     (:begin 480 :end 615 :drawer-name "LOGBOOK" :contents-begin 490 :contents-end 609 :post-blank 0 :post-affiliated 480 :parent #12)
                                                     (plain-list
                                                      (:type unordered :begin 490 :end 609 :contents-begin 490 :contents-end 609 :structure
                                                             ((490 0 "- " nil nil nil 609))
                                                             :post-blank 0 :post-affiliated 490 :parent #13)
                                                      (item
                                                       (:bullet "- " :begin 490 :end 609 :contents-begin 492 :contents-end 609 :checkbox nil :counter nil :structure
                                                                ((490 0 "- " nil nil nil 609))
                                                                :pre-blank 0 :post-blank 0 :post-affiliated 490 :tag nil :parent #14)
                                                       (paragraph
                                                        (:begin 492 :end 609 :contents-begin 492 :contents-end 609 :post-blank 0 :post-affiliated 492 :parent #15)
                                                        #("State \"DONE\"       from \"DOING\"      " 0 37
                                                          (:parent #16))
                                                        (timestamp
                                                         (:type inactive :raw-value "[2021-08-06 Fri 09:55]" :year-start 2021 :month-start 8 :day-start 6 :hour-start 9 :minute-start 55 :year-end 2021 :month-end 8 :day-end 6 :hour-end 9 :minute-end 55 :begin 529 :end 552 :post-blank 1 :parent #16))
                                                        (line-break
                                                         (:begin 552 :end 555 :post-blank 0 :parent #16))
                                                        #("  Smaller thing 2 finished, and sent off to customer.\n" 0 54
                                                          (:parent #16))))))))))
                                     #6))
                            #4))
                   #2))
           (item #1
                 (paragraph
                  (:begin 335 :end 449 :contents-begin 335 :contents-end 449 :post-blank 0 :post-affiliated 335 :parent #3)
                  #("State \"DONE\"       from \"DOING\"      " 0 37
                    (:parent #4))
                  (timestamp
                   (:type inactive :raw-value "[2021-07-30 Fri 09:53]" :year-start 2021 :month-start 7 :day-start 30 :hour-start 9 :minute-start 53 :year-end 2021 :month-end 7 :day-end 30 :hour-end 9 :minute-end 53 :begin 372 :end 395 :post-blank 1 :parent #4))
                  (line-break
                   (:begin 395 :end 398 :post-blank 0 :parent #4))
                  #("  Smaller thing 1 done! Results sent to " 0 40
                    (:parent #4))
                  (bold
                   (:begin 438 :end 447 :contents-begin 439 :contents-end 446 :post-blank 0 :parent #4)
                   #("someone" 0 7
                     (:parent #5)))
                  #(".\n" 0 2
                    (:parent #4))))))
 (paragraph
  (:begin 335 :end 449 :contents-begin 335 :contents-end 449 :post-blank 0 :post-affiliated 335 :parent
          (item
           (:bullet "- " :begin 333 :end 449 :contents-begin 335 :contents-end 449 :checkbox nil :counter nil :structure
                    ((333 0 "- " nil nil nil 449))
                    :pre-blank 0 :post-blank 0 :post-affiliated 333 :tag nil :parent
                    (plain-list
                     (:type unordered :begin 333 :end 449 :contents-begin 333 :contents-end 449 :structure
                            ((333 0 "- " nil nil nil 449))
                            :post-blank 0 :post-affiliated 333 :parent
                            (drawer
                             (:begin 323 :end 455 :drawer-name "LOGBOOK" :contents-begin 333 :contents-end 449 :post-blank 0 :post-affiliated 323 :parent
                                     (section
                                      (:begin 323 :end 455 :contents-begin 323 :contents-end 455 :post-blank 0 :post-affiliated 323 :parent
                                              (headline
                                               (:raw-value "Smaller thing 1" :begin 298 :end 455 :pre-blank 0 :contents-begin 323 :contents-end 455 :level 3 :priority nil :tags nil :todo-keyword
                                                           #("DONE" 0 4
                                                             (fontified t face org-done line-prefix
                                                                        #("**" 0 2
                                                                          (face org-indent))
                                                                        wrap-prefix
                                                                        #("***** " 0 2
                                                                          (face org-indent)
                                                                          2 6
                                                                          (face org-indent))))
                                                           :todo-type done :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 298 :title
                                                           (#("Smaller thing 1" 0 15
                                                              (:parent #11)))
                                                           :parent
                                                           (headline
                                                            (:raw-value "Do a big thing" :begin 217 :end 615 :pre-blank 0 :contents-begin 235 :contents-end 615 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 217 :title
                                                                        (#("Do a big thing" 0 14
                                                                           (:parent #13)))
                                                                        :parent
                                                                        (headline
                                                                         (:raw-value "Tasks" :begin 164 :end 748 :pre-blank 1 :contents-begin 173 :contents-end 744 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 4 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 164 :title
                                                                                     (#("Tasks" 0 5
                                                                                        (:parent #15)))
                                                                                     :parent nil)
                                                                         (section
                                                                          (:begin 173 :end 217 :contents-begin 173 :contents-end 216 :post-blank 1 :post-affiliated 173 :parent #15)
                                                                          (paragraph
                                                                           (:begin 173 :end 216 :contents-begin 173 :contents-end 216 :post-blank 0 :post-affiliated 173 :parent #16)
                                                                           #("I'm putting some tasks here as an example.\n" 0 43
                                                                             (:parent #17))))
                                                                         #13
                                                                         (headline
                                                                          (:raw-value "On the horizon" :begin 615 :end 744 :pre-blank 0 :contents-begin 633 :contents-end 744 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 615 :title
                                                                                      (#("On the horizon" 0 14
                                                                                         (:parent #16)))
                                                                                      :parent #15)
                                                                          (headline
                                                                           (:raw-value "Do the laundry" :begin 633 :end 686 :pre-blank 0 :contents-begin 657 :contents-end 686 :level 3 :priority nil :tags nil :todo-keyword
                                                                                       #("TODO" 0 4
                                                                                         (fontified t line-prefix
                                                                                                    #("**" 0 2
                                                                                                      (face org-indent))
                                                                                                    wrap-prefix
                                                                                                    #("***** " 0 2
                                                                                                      (face org-indent)
                                                                                                      2 6
                                                                                                      (face org-indent))
                                                                                                    face org-todo))
                                                                                       :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 633 :title
                                                                                       (#("Do the laundry" 0 14
                                                                                          (:parent #17)))
                                                                                       :parent #16)
                                                                           (section
                                                                            (:begin 657 :end 686 :contents-begin 657 :contents-end 686 :post-blank 0 :post-affiliated 657 :parent #17)
                                                                            (paragraph
                                                                             (:begin 657 :end 686 :contents-begin 657 :contents-end 686 :post-blank 0 :post-affiliated 657 :parent #18)
                                                                             #("This will never get done....\n" 0 29
                                                                               (:parent #19)))))
                                                                          (headline
                                                                           (:raw-value "Eat breakfast" :begin 686 :end 744 :pre-blank 0 :contents-begin 709 :contents-end 744 :level 3 :priority nil :tags nil :todo-keyword
                                                                                       #("DONE" 0 4
                                                                                         (fontified t line-prefix
                                                                                                    #("**" 0 2
                                                                                                      (face org-indent))
                                                                                                    wrap-prefix
                                                                                                    #("***** " 0 2
                                                                                                      (face org-indent)
                                                                                                      2 6
                                                                                                      (face org-indent))
                                                                                                    face org-done))
                                                                                       :todo-type done :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 686 :title
                                                                                       (#("Eat breakfast" 0 13
                                                                                          (:parent #17)))
                                                                                       :parent #16)
                                                                           (section
                                                                            (:begin 709 :end 748 :contents-begin 709 :contents-end 744 :post-blank 4 :post-affiliated 709 :parent #17)
                                                                            (paragraph
                                                                             (:begin 709 :end 744 :contents-begin 709 :contents-end 744 :post-blank 0 :post-affiliated 709 :parent #18)
                                                                             #("Done, but hardly an accomplishment\n" 0 35
                                                                               (:parent #19))))))))
                                                            (section
                                                             (:begin 235 :end 298 :contents-begin 235 :contents-end 298 :post-blank 0 :post-affiliated 235 :parent #13)
                                                             (paragraph
                                                              (:begin 235 :end 298 :contents-begin 235 :contents-end 298 :post-blank 0 :post-affiliated 235 :parent #14)
                                                              #("Do something that involves lots of smaller tasks getting done.\n" 0 63
                                                                (:parent #15))))
                                                            #11
                                                            (headline
                                                             (:raw-value "Smaller thing 2" :begin 455 :end 615 :pre-blank 0 :contents-begin 480 :contents-end 615 :level 3 :priority nil :tags nil :todo-keyword
                                                                         #("DONE" 0 4
                                                                           (fontified t face org-done line-prefix
                                                                                      #("**" 0 2
                                                                                        (face org-indent))
                                                                                      wrap-prefix
                                                                                      #("***** " 0 2
                                                                                        (face org-indent)
                                                                                        2 6
                                                                                        (face org-indent))))
                                                                         :todo-type done :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 455 :title
                                                                         (#("Smaller thing 2" 0 15
                                                                            (:parent #14)))
                                                                         :parent #13)
                                                             (section
                                                              (:begin 480 :end 615 :contents-begin 480 :contents-end 615 :post-blank 0 :post-affiliated 480 :parent #14)
                                                              (drawer
                                                               (:begin 480 :end 615 :drawer-name "LOGBOOK" :contents-begin 490 :contents-end 609 :post-blank 0 :post-affiliated 480 :parent #15)
                                                               (plain-list
                                                                (:type unordered :begin 490 :end 609 :contents-begin 490 :contents-end 609 :structure
                                                                       ((490 0 "- " nil nil nil 609))
                                                                       :post-blank 0 :post-affiliated 490 :parent #16)
                                                                (item
                                                                 (:bullet "- " :begin 490 :end 609 :contents-begin 492 :contents-end 609 :checkbox nil :counter nil :structure
                                                                          ((490 0 "- " nil nil nil 609))
                                                                          :pre-blank 0 :post-blank 0 :post-affiliated 490 :tag nil :parent #17)
                                                                 (paragraph
                                                                  (:begin 492 :end 609 :contents-begin 492 :contents-end 609 :post-blank 0 :post-affiliated 492 :parent #18)
                                                                  #("State \"DONE\"       from \"DOING\"      " 0 37
                                                                    (:parent #19))
                                                                  (timestamp
                                                                   (:type inactive :raw-value "[2021-08-06 Fri 09:55]" :year-start 2021 :month-start 8 :day-start 6 :hour-start 9 :minute-start 55 :year-end 2021 :month-end 8 :day-end 6 :hour-end 9 :minute-end 55 :begin 529 :end 552 :post-blank 1 :parent #19))
                                                                  (line-break
                                                                   (:begin 552 :end 555 :post-blank 0 :parent #19))
                                                                  #("  Smaller thing 2 finished, and sent off to customer.\n" 0 54
                                                                    (:parent #19))))))))))
                                               #9))
                                      #7))
                             #5))
                     #3))
           #1))
  #("State \"DONE\"       from \"DOING\"      " 0 37
    (:parent #1))
  (timestamp
   (:type inactive :raw-value "[2021-07-30 Fri 09:53]" :year-start 2021 :month-start 7 :day-start 30 :hour-start 9 :minute-start 53 :year-end 2021 :month-end 7 :day-end 30 :hour-end 9 :minute-end 53 :begin 372 :end 395 :post-blank 1 :parent #1))
  (line-break
   (:begin 395 :end 398 :post-blank 0 :parent #1))
  #("  Smaller thing 1 done! Results sent to " 0 40
    (:parent #1))
  (bold
   (:begin 438 :end 447 :contents-begin 439 :contents-end 446 :post-blank 0 :parent #1)
   #("someone" 0 7
     (:parent #2)))
  #(".\n" 0 2
    (:parent #1))))
#+end_src


This sucks, more or less.

Just plucking log entries recording a transition to =DONE= in headlines is not very robust. What if the item was closed and later reopened and re-closed, possibly without making a logbook entry? The entry may or may not refer to the most recent closure.

So instead, we need to parse all the state transition logbook entries in order, and ensure that we're only looking at the most recent one for extra information.

We also want to keep the resolution tied to the headline. Solving the problem for a single headline and generalizing from that makes more sense than the solution above, which creates a list of resolutions and leaves the problem of tying them back to headlines until last (and never fixed, either).

Its easy enough to generalize the regex for any state transition.

**** Parsing state transition entries

#+begin_src emacs-lisp :noweb-ref strans-regex
  (defconst pg-pm--rx-logbook-resolved
    (rx "State"
        (+ whitespace)
        "\"" (group (+ (not "\""))) "\""
        (+ whitespace)
        "from"
        (+ whitespace)
        "\"" (group (+ (not "\""))) "\"")
    "Regex matching log entries of to-do state transitions, per the
    default state format string in
    `org-log-note-headings'. Capturing accomplishments will break
    if that entry in `org-log-note-headings' is changed. (As will
    large chunks of org-agenda.)")
#+end_src

A function using it to identify and extract the data we need from a single log entry is similarly straightforward. (One thing the function above does right is solving the problem for a specific logbook entry. We'll keep that, but change how it's used later.)



#+begin_src emacs-lisp :noweb-ref parse-strans-log-entry
  (defun pg-pm--parse-strans-log-entry (lb-item)
    "If LB-ITEM is a logbook entry that looks like it was generated
  when a to-do item's status changed, parse it and return a list of
  the state it was changed to (as a symbol), the state it was
  changed from (as a symbol), the timestamp, and an org paragraph
  element representing any additional notes provided by the
  user. Otherwise, return nil."
    ;; Start by getting the paragraph portion of the logbook item
    (-when-let* [((s ts . the-rest)  (org-ml-item-get-paragraph lb-item))
                 ;; parse out the to and from states
                 ((_ to from) (->> (org-ml-to-trimmed-string s)
                                   (s-match pg-pm--rx-logbook-resolved)))
                 ;; if notes exist, create as new paragraph
                 (notes (if (org-ml-is-type 'line-break (first (pg-util-spy the-rest)))
                            ;; trick to inline (cdr the-rest) as args
                            (let ((para-objs (-map (lambda (x) `(quote ,x)) (cdr the-rest))))
                              (eval `(org-ml-build-paragraph ,@(cdr para-objs))))
                          ;; no additional notes == empty paragraph
                          (org-ml-build-paragraph)))]
      (list (intern to) (intern from) ts notes)))
#+end_src

#+RESULTS:
: pg-pm--parse-strans-log-entry


That's a little dense. Let's test it out.

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>
  <<strans-regex>>
  <<parse-strans-log-entry>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (first)
       (pg-pm--headline-logbook-items)
       (first)
       (pg-pm--parse-strans-log-entry))
#+end_src

#+RESULTS:

Kind of ugly, but it will get cleaned up shortly.

***** Fun with timestamps

Let's do a little spike and figure out what's possible with time stamps.

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>
  <<strans-regex>>
  <<parse-strans-log-entry>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (first)
       (pg-pm--headline-logbook-items)
       (first)
       (pg-pm--parse-strans-log-entry)
       ;; Pull out the timestamp
       (nth 2)
       (ts-parse-org-element))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
#s(ts 9 53 0 30 7 2021 nil nil nil nil nil nil nil nil nil nil nil)
#+end_src


So that's how we bridge the gap between =org-ml= and =ts=.



*** Building an accomplishment record

What we just did to test =pg-pm--parse-strans-log-entry= is more or less what we need to do for each headline we're looking at. So let's put it into a function.

But first, what is an accomplishment? A finished task is an accomplishment if and only if:

- It's completed (i.e., status is =DONE=)
- We have a record of its completion (i.e., the last state transition entry matches the state of the finished item)

We also need some description of what was accomplished. When it exists, the notes associated with the state transition entry serve the purpose. If notes do not exist, we will currently assume the actual text of the headline will suffice.

#+begin_src emacs-lisp :noweb-ref build-accomplishment
  (defun pg-pm--accomplishment? (headline strans-entries)
    "Returns a true value if the entries in STRANS-ENTRIES
    constitute an actual accomplishment, otherwise nil.

  STRANS-ENTRIES should be a list of state transition logbook
  entries, as processed by `pg-pm--parse-strans-log-entry'."
    ;; To be an accomplishment, there must be a logbook entry
    ;; corresponding to the current to-do state of the headline (so the
    ;; info in the first logbook entry and the headline to-do state must
    ;; match), and the to-do state of the headline must indicate that
    ;; the task is finished (which currently just means it's in state
    ;; DONE).
    ;;
    ;; If more than one to-do state indicated that a task was finished,
    ;; we'd also have to check that the state on the entry matched the
    ;; one on the headline, but with one finishing state, we get that
    ;; for free, so to speak.
    (and (equal "DONE" (org-ml-get-property :todo-keyword headline))
         (equal 'DONE (first (first strans-entries)))))


  (defun pg-pm--build-accomplishment (headline)
    "Return an accomplishment record for HEADLINE. The
  accomplishment record contains the headline, the transition log
  entry corresponding to the finishing of the accomplishment, and
  all the elements of the transition log entry, as returned by
  `pg-pm--parse-strans-log-entry'.

  If the headline is not, in fact, an accomplishment, this function
  returns nil."
    (let ((logbook-entries (->> headline
                                (pg-pm--headline-logbook-items)
                                (-map #'pg-pm--parse-strans-log-entry))))
      (when (pg-pm--accomplishment? headline logbook-entries)
        (list headline (first logbook-entries) logbook-entries))))
#+end_src

Used thusly:

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>
  <<strans-regex>>
  <<parse-strans-log-entry>>
  <<build-accomplishment>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (-keep #'pg-pm--build-accomplishment)
       (first))
#+end_src



As you can see, =pg-pm--build-accomplishment= is both a constructor and a predicate, so we can throw a list of maybe-accomplishments at it and use =-keep= to filter out the non-accomplishments.

*** Org-mode representation of accomplishments

The accomplishment record is convenient for processing, but we'll eventually want to represent accomplishments in Org. Building that now also gives us a "free" string representation.

#+begin_src emacs-lisp :noweb-ref accomplishment-to-org


  (defun pg-pm--accomplishment-to-org (accomplishment)
    "Convert an ACCOMPLISHMENT, an accomplishment record, to an
    org-element representation. If ACCOMPLISHMENT is nil, return
    nil."

    (-let* (((headline (_ _ ts notes)) accomplishment))
      (org-ml-build-headline
       :title (org-ml-get-property :title headline)
       (org-ml-build-section notes))))
#+end_src

#+RESULTS:
: pg-pm--accomplishment-to-org

Used thusly:

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>
  <<strans-regex>>
  <<parse-strans-log-entry>>
  <<build-accomplishment>>
  <<accomplishment-to-org>>


  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (-keep #'pg-pm--build-accomplishment)
       (first)
       (pg-pm--accomplishment-to-org))
#+end_src

#+RESULTS:


*** Building an accomplishment record

What we just did to test =pg-pm--parse-strans-log-entry= is more or less what we need to do for each headline we're looking at. So let's put it into a function.

But first, what is an accomplishment? A finished task is an accomplishment if and only if:

- It's completed (i.e., status is =DONE=)
- We have a record of its completion (i.e., the last state transition entry matches the state of the finished item)

We also need some description of what was accomplished. When it exists, the notes associated with the state transition entry serve the purpose. If notes do not exist, we will currently assume the actual text of the headline will suffice.

#+begin_src emacs-lisp :noweb-ref build-accomplishment
  (defun pg-pm--accomplishment? (headline strans-entries)
    "Returns a true value if the entries in STRANS-ENTRIES
    constitute an actual accomplishment, otherwise nil.

  STRANS-ENTRIES should be a list of state transition logbook
  entries, as processed by `pg-pm--parse-strans-log-entry'."
    ;; To be an accomplishment, there must be a logbook entry
    ;; corresponding to the current to-do state of the headline (so the
    ;; info in the first logbook entry and the headline to-do state must
    ;; match), and the to-do state of the headline must indicate that
    ;; the task is finished (which currently just means it's in state
    ;; DONE).
    ;;
    ;; If more than one to-do state indicated that a task was finished,
    ;; we'd also have to check that the state on the entry matched the
    ;; one on the headline, but with one finishing state, we get that
    ;; for free, so to speak.
    (and (equal "DONE" (org-ml-get-property :todo-keyword headline))
         (equal 'DONE (first (first strans-entries)))))


  (defun pg-pm--build-accomplishment (headline)
    "Return an accomplishment record for HEADLINE. The
  accomplishment record contains the headline, the transition log
  entry corresponding to the finishing of the accomplishment, and
  all the elements of the transition log entry, as returned by
  `pg-pm--parse-strans-log-entry'.

  If the headline is not, in fact, an accomplishment, this function
  returns nil."
    (let ((logbook-entries (->> headline
                                (pg-pm--headline-logbook-items)
                                (-map #'pg-pm--parse-strans-log-entry))))
      (when (pg-pm--accomplishment? headline logbook-entries)
        (list headline (first logbook-entries) logbook-entries))))
#+end_src

Used thusly:

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>
  <<strans-regex>>
  <<parse-strans-log-entry>>
  <<build-accomplishment>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (-keep #'pg-pm--build-accomplishment)
       (first))
#+end_src



As you can see, =pg-pm--build-accomplishment= is both a constructor and a predicate, so we can throw a list of maybe-accomplishments at it and use =-keep= to filter out the non-accomplishments.

*** Org-mode representation of accomplishments

The accomplishment record is convenient for processing, but we'll eventually want to represent accomplishments in Org. Building that now also gives us a "free" string representation.

#+begin_src emacs-lisp :noweb-ref accomplishment-to-org
  (defun --org-ml-orphan (node)
    (org-ml-set-property :parent nil (pg-util-spy node)))

  (defun pg-pm--accomplishment-to-org (accomplishment)
    "Convert an ACCOMPLISHMENT, an accomplishment record, to an
    org-element representation. If ACCOMPLISHMENT is nil, return
    nil."

    (-let* (((headline (_ _ ts notes)) accomplishment)
            (h2 (org-ml-build-headline
                 :title (org-ml-get-property :title headline)
                 (org-ml-build-section notes))))
      nil))
#+end_src

#+RESULTS:
: pg-pm--accomplishment-to-org

Used thusly:

#+begin_src emacs-lisp :noweb yes :results code :exports code
  <<finished-tasks>>
  <<headline-logbook-items>>
  <<strans-regex>>
  <<parse-strans-log-entry>>
  <<build-accomplishment>>
  <<accomplishment-to-org>>


  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--finished-tasks)
       (-keep #'pg-pm--build-accomplishment)
       (first)
       (pg-pm--accomplishment-to-org))
#+end_src

#+RESULTS:
