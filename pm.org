#+STYLE: <link rel="stylesheet" type="text/css" href="style.css">
#+startup: indent
#+TITLE: pm.org: Project management


This is how I manage the projects I work on. The idea is to provide optional structure to whatever someone (i.e., me) is already doing. Projects can co-exist beside other things that aren't recognized by this as such, but if a =project.org= file exists in a directory, some additional features are available in everyone's favorite time tracker, Emacs.


* Commentary

** Project setup

A directory underneath =pg-pm-active-projects= that contains a =project.org= file is considered a project. A skeleton =project.org= file looks like this

#+begin_src org
  ,#+title: Project Name
  ,#+project_status: active
  ,#+category: proj
  ,#+seq_todo: TODO  DOING | DONE(@)
#+end_src


That's all! Even some of this is discretionary:

- The title is optional, but may be utilized later
- The =project_status= is the only required property. Setting it to =active= means this project will be included as an active project. (If you have old =project.org= files from Before, this should ensure they don't accidentally get picked up.)
- =category= is for =org-agenda=, so you know what project is associated with what to-do items.
- =seq_todo= is optional, but if it's specified, be sure it contains a =DONE= status so accomplishments can be tracked. (This may be parameterized someday.)


Now you can add to-do items in a project file and they will automatically show up in =org-agenda= views. If you mark a status =DONE= and add a log entry describing the final disposition of the task, it will be picked up as an accomplishment

#+begin_src emacs-lisp :results code
  (org-ml-parse-this-headline)
#+end_src




** Features

*** Org-agenda management

Use your project files as the inputs to your org-agenda. (Coming soon, or maybe, or never: Custom agenda view so I don't clobber =org-agenda-files=.)

*** Reporting

Currently, I've only implemented one custom report, leaning heavily on =org-ml= to extract info and put it into a document (okay, the last part's aspirational). Coming soon, or maybe, or never: A framework for creating reports by selecting and transforming elements in the project according to a template. (I need to come up with a way that's more compelling than converting to XML via [[https://github.com/ndw/org-to-xml][org-to-xml]] or something to do that.)


** Sample Tasks


Listing [[input/sample-tasks]] provides some example code that will be used later to exercise code.

#+name: input/sample-tasks
#+begin_src org :tangle no :exports code
  ,* Do a big thing
  Do something that involves lots of smaller tasks getting done.
  ,** DONE Smaller thing 1
  :LOGBOOK:
  - State "DONE"       from "DOING"      [2021-07-30 Fri 09:53] \\
    Smaller thing 1 done! Results sent to *someone*.
  :END:
  ,** DONE Smaller thing 2
  :LOGBOOK:
  - State "DONE"       from "DOING"      [2021-08-06 Fri 09:55] \\
    Smaller thing 2 finished, and sent off to customer.
  :END:
  ,* On the horizon
  ,** TODO Do the laundry
  This will never get done....
  ,** DONE Eat breakfast
  Done, but hardly an accomplishment
#+end_src

* Code

** Package Header

#+name: src/header
#+BEGIN_SRC emacs-lisp
  ;;; pm.el --- Project Management

  ;; Copyright (C) 2021 Phil Groce

  ;; Author: Phil Groce <pgroce@gmail.com>
  ;; Version: 0.3.2.7
  ;; Package-Requires: ((emacs "26.1") (dash "2.19") (s "1.12") (org-ml "5.7") (ts "0.3") (projectile "20210825.649") (helm "20210826.553") (pg-util "0.3") (pg-ert "0.1") (pg-org "0.4") (pm-task "0.1.3"))
  ;; Keywords: productivity
#+END_SRC



** Requires

I might make the projectile and helm dependencies conditional in the future, but they work for me now, so screw it.

I still need functions from both =ert= and =pg-ert=, so I'm requiring both. In practice, =pg-ert= also depends on =ert=, but hey, abstraction.

#+name: src/requires
#+begin_src emacs-lisp :noweb-ref requires
  (eval-when-compile (require 'cl-macs))
  (require 'org)
  (require 'dash)
  (require 's)
  (require 'ts)
  (require 'org-ml)
  (require 'projectile)
  (require 'helm)
  (require 'ert)
  (require 'pg-ert)
  (require 'pg-org)
  (require 'pg-util)
  (require 'pm-task)
#+end_src



** Active projects

=pm.el= will look for these directories (actually the project file, but preserving the path) and keep a cache of them. Switch to any of these active projects with =pg-pm-switch-to-active-project=, which is more or less a restricted version of =projectile-switch-to-project=.

#+name src/active-projects
#+begin_src emacs-lisp :noweb-ref active-projects
  (defcustom pg-pm-project-dir "~/active-projects"
    "Directory containing projects"
    :type 'directory
    :group 'pm)

  (defun pg-pm-set-agenda-files ()
    "Set `org-agenda-files' according to the contents of
    `pg-pm-active-projects'. Called as a hook in
    `pg-pm-active-projects-refreshed-hook'."
    (setq org-agenda-files (pg-pm-active-projects))
    (message "pm: Agenda refreshed"))

  (defcustom pg-pm-active-projects-refreshed-hook
    '(pg-pm-set-agenda-files)
    "Hook run when the active projects are refreshed."
    :group 'pm
    :type 'hook)


  (defvar pg-pm--active-project-cache nil
    "List of active projects. Automatically generated if
    `nil'. Otherwise it must be manually refreshed using
    `pg-pm-refresh-active-projects' if new pm projects are
    created/removed.")



  (defun pg-pm--find-active-projects ()
    "Find active project files on disk."
    ;; Visit the project file buffers and figure out which ones have an
    ;; active status. Don't keep any of the buffers around that weren't
    ;; around already.
    (--filter (let ((new? (not (find-buffer-visiting it))))
                (with-current-buffer (find-file-noselect it)
                  (unwind-protect
                   (org-ml-match
                    '((:and keyword (:key "PROJECT_STATUS") (:value "active")))
                    (org-ml-parse-this-toplevel-section))
                   (when new?
                     (kill-buffer)))))
              (directory-files-recursively
               pg-pm-project-dir "^project.org$")))

  (defun pg-pm--initialize-active-projects (&optional should-refresh? no-hooks?)
    "Initialize the list of active projects if it is
    uninitialized. If SHOULD-REFRESH? is non-nil, refresh
    the (non-empty) list.

  Calling this function will run the hooks in
  `pg-pm-active-projects-refreshed-hook' if the active projects are
  refreshed; set NO-HOOKS? to a non-nil value to disable this
  behavior."
    (when (or should-refresh?
              (eq nil pg-pm--active-project-cache))
      (setq pg-pm--active-project-cache (pg-pm--find-active-projects))
      (if  no-hooks?
          (message "pm: Not running hooks, no-hooks? is %s" no-hooks?)
        (run-hooks 'pg-pm-active-projects-refreshed-hook))))

  ;;;###autoload
  (defun pg-pm-refresh-active-projects ()
    "Refresh the list of active projects', then run
  `pg-pm-active-projects-refreshed-hook'. Run this command when
  the active projects have changed on-disk, to get the list in
  sync."
    (interactive)
    (pg-pm--initialize-active-projects t)
    (message "Active projects list refreshed"))

  (defun pg-pm-active-projects ()
    "Return the list of active projects."
    (pg-pm--initialize-active-projects)
    pg-pm--active-project-cache)


  (defun pg-pm--projectile-switch-project-action ()
    (let* ((org-files-source
            (helm-build-sync-source "Project Org Files"
              :candidates (->>  (directory-files ".")
                                (--filter (s-ends-with? ".org" it))
                                (--map (cons it it )))))
           (result (helm
                    :sources (list org-files-source
                                   helm-source-projectile-buffers-list
                                   helm-source-projectile-files-list)
                    :buffer "*helm PM project*"
                    :prompt (format "[%s] pattern: " (projectile-project-name)))))
      (cond
       ((stringp result) (find-file result))
       ((bufferp result) (switch-to-buffer result))
       (t result))))

  ;;;###autoload
  (defun pg-pm-switch-to-active-project (&optional arg)
    "Switch to one of the acive projects"
    (interactive)
    (let ((proj (->> (pg-pm-active-projects)
                     (-map #'file-name-directory)
                     (completing-read "Switch to Active Project: ")))
          (projectile-switch-project-action
           #'pg-pm--projectile-switch-project-action))
      (projectile-switch-project-by-name proj arg)))

#+end_src

*** Testing

To do. This uses a lot of general Emacs state and may not be worth trying to unit test.

** Project info

Collect project metadata from each =project.org= file. This amounts to reading the keywords defined at the top level of the file.

#+name: src/project-info
#+begin_src emacs-lisp


  (defmacro pm--to-buffer (buffer-or-file-name &optional err-message)
    "If BUFFER-OR-FILE-NAME is a buffer, return it. If it's a
    string, try to open it as a file name. Otherwise, signal an
    error with ERR-MESSAGE, or a default message."
    (let ((err-message (if err-message
                           err-message
                         "Invalid parameter, must be buffer or file name.")))
      `(let ((b-or-fn ,buffer-or-file-name))
         (cond
          ((bufferp b-or-fn) b-or-fn)
          ((stringp b-or-fn) (find-file-noselect b-or-fn))
          (nil (error ,err-message))))))


  (defun pm-project-meta (key project-file-or-buffer)
    "Assuming KEY is a keyword associated with the toplevel section
  of the project file in PROJECT-FILE-OR-BUFFER, return the
  value. IF the keyword is defined multiple times, get the first
  value. If KEY is not defined, return nil."
    (let ((buff (pm--to-buffer
                  project-file-or-buffer
                  "Invalid parameter: must be project file name or buffer.")))
      (with-current-buffer buff
        (->> (org-ml-parse-this-toplevel-section)
             (org-ml-match `((:and keyword (:key ,key))))
             (--map (org-ml-get-property :value it))
             (first)))))

#+end_src


*** Testing

#+name: input/project-ex
#+begin_src org
  ,#+startup: indent
  ,#+TITLE: Example

  A minimal example.
#+end_src

#+name: t/pm-project-meta
#+begin_src emacs-lisp :noweb eval :tangle no  :exports none
  <<src/project-info>>

  (pg-org-with-src input/project-ex
    (ert-deftest pg-pm-project-meta ()
      (should (s-equals? "Example" (pm-project-meta "TITLE" )))))

  (pg-ert-run-tests-string "pg-pm-sample-test")
#+end_src




** Tasks

Org can be configured to automatically track changes to todo items; this information can be used to provide robust issue-tracking similar to what is available in enterprise systems like Jira. Unfortunately, we can't get at this data directly from the =org-element= interface, so additional code is needed.

In this section we discuss some of the ways Org stores this additional information. We then use it to define an expanded notion of Org todo items, called /tasks/, which make task-tracking information more accessible.

More information on tasks–and the bulk of the task-specific code this package uses–can be found in [[pm-task.html][pm-task]] package.





** Reports

*** Status

The goal of the status report is to pull the latest status updates out of the task logbooks and compile them into a report, broken down by project and task. For example, given the project file

#+name: example/report/status/input
#+begin_src org
  ,#+title: Sample project
  ,#+startup: indent
  ,#+project_status: active
  ,#+category: sample-1
  ,#+seq_todo: TODO  DOING(@) BLOCKED(@) | DONE(@) CANCELLED(@)


  ,* Tasks
  :PROPERTIES:
  :CONTAINS_TASKS: t
  :END:

  ,** DOING Rewire the security system
  :PROPERTIES:
  :ASSIGNEE: Bart Starr
  :END:
  :LOGBOOK:
  - Annotation by "asmithee" on [2022-01-27 Thu 20:01] \\
    Just a test
  - State "DOING"      from "BLOCKED"    [2021-12-11 Sat 20:06] \\
    Third item added
  - State "BLOCKED"    from "DOING"      [2021-12-11 Sat 20:05] \\
    Second item added
  - State "DOING"      from "TODO"       [2021-12-11 Sat 20:04] \\
    First item added
  :END:
  This is the description.


  ,** DOING Get past the guards()
  :PROPERTIES:
  :ASSIGNEE: Bart Starr
  :END:
  :LOGBOOK:
  - Annotation by "asmithee" on [2022-01-27 Thu 20:01] \\
    Just another test, but in a different task
  - State "DOING"      from "BLOCKED"    [2021-12-11 Sat 20:06] \\
    Third item added
  - State "BLOCKED"    from "DOING"      [2021-12-11 Sat 20:05] \\
    Second item added
  - State "DOING"      from "TODO"       [2021-12-11 Sat 20:04] \\
    First item added
  :END:
  This is the description.
#+end_src


*** Accomplishments

Accomplishments are similar to milestones, but perhaps a bit less premeditated.

This code was written before a substantial amount of work was done in =pm=, =pm-task=, and =pg-org= to facilitate searching and reporting, so its use as an example should be limited.

**** Selecting headlines
Consider the selection of =DONE= headlines.

#+begin_src  emacs-lisp :tangle no :exports code
  (let ((config (list :log-into-drawer "LOGBOOK" :clock-into-drawer t)))
      (->> (org-ml-parse-subtrees 'all)
           (org-ml-match '(:any * (:todo-keyword "DONE")))
           (--map (org-ml-headline-get-logbook-items config it))))
#+end_src

Let's pull apart this functionality. First: finding candidate accomplishments. I'm calling these "accandidates," mainly because that's very distinctive and easy to both pronounce and search for/replace.

An accandidate is quite simple, there's almost no need to define this as a function. It does, however, make it clear that we're introducing an abstraction, and it makes a convenient choice point if the notion of an accandidate (wow this is a dumb word) ever becomes more complicated.

#+name: src/accandidates
#+begin_src emacs-lisp
  (defun pg-pm--accandidates (node)
    "Return headline nodes for all tasks under NODE with the keyword DONE.

  As a practical matter, NODE can be a list of subtrees (i.e., the
  return value of `org-ml-parse-subtrees')"
    (org-ml-match '(:any * (:and headline (:todo-keyword "DONE"))) node))
#+end_src

Let's test this out.

#+name: t/accandidates
#+begin_src emacs-lisp :noweb eval :tangle no :results code :exports none
  <<src/accandidates>>
  <<src/headline-logbook-items>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--accandidates)
       (-map #'pg-pm--headline-logbook-items))
#+end_src

**** Parsing logbook entries

There's a lot of useful, parseable information in logbook entries, but it isn't part of the Org format, so the Org element tree just stores it as strings. We need to write some additional code to take full advantage of the information they contain.

Org will automatically add a logbook entry when to-do items are set to certain resolutions, as specified by the user. The format of this entry is specified in =org-log-note-headings=. It can be redefined, but Org documents that doing so will break =org-agenda=, so it seems safe to rely on this format in general. Based on that, it's easy enough to write a regular expression for any state transition, capturing the current to-do state, the new state, the timestamp of the change, and any notes the user has added.

#+name: src/rx-logbook-resolved
#+begin_src emacs-lisp :noweb-ref strans-regex
  (defcustom pg-pm-rx-logbook-resolved
    (rx "State"
        (+ whitespace)
        "\"" (group (+ (not "\""))) "\""
        (+ whitespace)
        "from"
        (+ whitespace)
        "\"" (group (+ (not "\""))) "\"")
    "Regex matching log entries of to-do state transitions, per the
    default state format string in
    `org-log-note-headings'. Capturing accomplishments will break
    if that entry in `org-log-note-headings' is changed. (As will
    large chunks of org-agenda.) In that case, it will be necessary
    to customize this regex to correspond."
    :type 'regexp
    :group 'pm)
#+end_src

Using this, we can convert a logbook entry corresponding to this regular expression (which I call a /state-transition log entry/ or /strans log entry/) into a simple list.

#+name: src/-parse-strans-log-entry
#+begin_src emacs-lisp :noweb-ref parse-strans-log-entry
  (defun pg-pm--parse-strans-log-entry (lb-item)
    "If LB-ITEM is a logbook entry that looks like it was generated
  when a to-do item's status changed, parse it and return a list of
  the state it was changed to (as a symbol), the state it was
  changed from (as a symbol), the timestamp, and an org paragraph
  element representing any additional notes provided by the
  user. Otherwise, return nil."
    ;; Start by getting the paragraph portion of the logbook item
    (-when-let* [((s ts . the-rest)  (org-ml-item-get-paragraph lb-item))
                 ;; parse out the to and from states
                 ((_ to from) (->> (org-ml-to-trimmed-string s)
                                   (s-match pg-pm-rx-logbook-resolved)))
                 ;; if notes exist, create as new paragraph
                 (notes (if (org-ml-is-type 'line-break (first the-rest))
                            ;; trick to inline (cdr the-rest) as args
                            (let ((para-objs (-map (lambda (x) `(quote ,x)) (cdr the-rest))))
                              (eval `(org-ml-build-paragraph ,@para-objs)))
                          ;; no additional notes == empty paragraph
                          (org-ml-build-paragraph)))]
      (list (intern to) (intern from) ts notes)))


  (defun pg-pm--strans-to-string (strans)
    "Render the data structure returned by
    `pg-pm--parse-strans-log-entry' as a string."
    (-let [(to from ts notes) strans]
      (format "#(%s %s \"%s\" \"%s\")"
              (symbol-name to)
              (symbol-name from)
              (org-ml-to-trimmed-string ts)
              (org-ml-to-trimmed-string notes))))
#+end_src


That's a little dense. Let's test it out.

#+name: t/-parse-strans-log-entry/1
#+begin_src emacs-lisp :noweb eval :tangle no :results code :exports none
  <<src/accandidates>>
  <<src/headline-logbook-items>>
  <<src/rx-logbook-resolved>>
  <<src/-parse-strans-log-entry>>

  (-let [(to from ts notes)
         (->> (org-ml-parse-subtrees 'all)
              (pg-pm--accandidates)
              (first)
              (pg-pm--headline-logbook-items)
              (first)
              (pg-pm--parse-strans-log-entry))]
    notes)
#+end_src

The string version is a bit easier to read.

#+name: t/-parse-strans-log-entry/2
#+begin_src emacs-lisp :noweb eval :tangle no :results code :exports none
    <<src/accandidates>>
    <<src/headline-logbook-items>>
    <<src/rx-logbook-resolved>>
    <<src/-parse-strans-log-entry>>

    (->> (org-ml-parse-subtrees 'all)
         (pg-pm--accandidates)
         (first)
         (pg-pm--headline-logbook-items)
         (first)
         (pg-pm--parse-strans-log-entry)
         (pg-pm--strans-to-string))
#+end_src


**** Tasks

Tasks are regular todo items that have been logged with some discipline. Don't have those? No problem, but they won't be picked up as tasks.

Specifically, something is a capital-t Task if the /last/ logbook entry for the headline is logged in Org's format for logging todo keywords, /and/ it matches the todo-keyword status of the headline's current keyword. (Put another way, if the current status of the headline was logged.)

#+name: src/accomplishments
#+begin_src emacs-lisp
  (defun pg-pm--build-task (headline)
    "Return a task from HEADLINE, or nil if HEADLINE is not a task."
    (let ((logbook-entries (->> headline
                                (pg-pm--headline-logbook-items)
                                (-map #'pg-pm--parse-strans-log-entry))))
      (when (pg-pm--accomplishment? headline logbook-entries)
        (list headline (or (first logbook-entries)
                           (org-ml-get-property :title headline))))))


  (defun pg-pm--accomplishment-headline (accomplishment)
    "Get the headline associated with ACCOMPLISHMENT."
    (-let [(headline _) accomplishment]
      headline))

  (defun pg-pm--accomplishment-strans (accomplishment)
    "Get the state transition entry associated with ACCOMPLISHMENT."
    (-let [(_ strans) accomplishment]
      strans))

  (defun pg-pm--accomplishment-to-string (accomplishment)
    "Render the data structure returned by
    `pg-pm--build-accomplishment' as a string."
    (-let [(headline strans) accomplishment]
      (format "#(\"%s\" %s)"
              (org-ml-to-trimmed-string headline)
              (pg-pm--strans-to-string strans))))
#+end_src


**** Time manipulation

This library uses [[https://github.com/alphapapa/ts.el][ts.el]] to do time manipulation. These functions make =ts-adjust= a little easier to use with dynamic input.

#+name: src/time-spec-from-string
#+begin_src emacs-lisp :noweb-ref time-manip
  (defun pm-time-spec-from-string (time-spec)
    "Return a list of adjustments based on TIME-SPEC.

  The format of TIME-SPEC is a series of adjustments of the form \"<num><unit>\",
  where num is an integer (possibly negative) and unit is one of the following unit specifiers:

     Y : year
     M : month
     d : day
     h : hour
     m : minute
     s : second

  For example, \"4y\" represents an adjustment of four years,
  or ('year 4) as a `ts-adjust' adjustment. \"3d14h\"
  represents ('day 3 'hour 14). Otherwise, all semantics of
  `ts-ajust' are observed."
    (let ((s2 time-spec)
          (regex (rx bol
                     (group (* (or "+" "-"))
                            (+ digit))
                     (group (or "Y" "M" "d" "h" "m" "s"))))
          (unit-alist '(("Y" . year)
                        ("M" . month)
                        ("d" . day)
                        ("h" . hour)
                        ("m" . minute)
                        ("s" . second))))
      (cl-loop until (s-equals? "" s2)
               collect (-let [(all num unit) (s-match regex s2)]
                         (if (eq all nil)
                             (error "Invalid time spec '%s'" time-spec)
                           (progn
                             (setq s2 (substring-no-properties s2 (length all)))
                             (list (cdr (assoc unit unit-alist))
                                   (string-to-number num))))))))


  (defun pm-ts-adjust-from-string (time-spec-string ts)
    "Like `ts-adjust', but instead of an series of adjustments,
  adjust from a string representation derived from
  `pg-time-spec-from-string'. TIME-SPEC-STRING contains the
  adjustment string; it is applied to TS.

  For the format of TIME-SPEC-STRING, see
  `pg--time-spec-from-string'."
    (eval `(ts-adjust
            ,@(->> (pm-time-spec-from-string time-spec-string)
                   (-flatten)
                   (-map (lambda (x) `(quote ,x))))
            ,ts)))
#+end_src

#+RESULTS:
: pm-ts-adjust-from-string


In addition to =ts-adjust=, we also use =ts-parse-org-element= to convert between Org timestamps and =ts=-style time structures.

So that's how we bridge the gap between =org-ml= and =ts=.


**** Building an accomplishment record

With all these tools in place, we can now match to-do items that we define as accomplishments. A finished task is an accomplishment if and only if:

- It's completed (i.e., status is =DONE=)
- We have a record of its completion (i.e., the last state transition entry matches the state of the finished item)

We also need some description of what was accomplished. When it exists, the notes associated with the state transition entry serve the purpose. If notes do not exist, we will currently assume the actual text of the headline will suffice.

We may add more criteria to this definition later (e.g., that they must be tagged as accomplishments) but that needs to be answered with use.

(You may wonder why this isn't a =defclass=. The reason is mainly that Emacs documentation doesn't handle functions generated by =defclass= too well, and I like my code to be discoverable from there.)

#+name: src/accomplishment
#+begin_src emacs-lisp :noweb-ref build-accomplishment
  (defun pg-pm--accomplishment? (headline strans-entries)
    "Returns a true value if the entries in STRANS-ENTRIES
    constitute an actual accomplishment, otherwise nil.

  STRANS-ENTRIES should be a list of state transition logbook
  entries, as processed by `pg-pm--parse-strans-log-entry'."
    ;; To be an accomplishment, there must be a logbook entry
    ;; corresponding to the current to-do state of the headline (so the
    ;; info in the first logbook entry and the headline to-do state must
    ;; match), and the to-do state of the headline must indicate that
    ;; the task is finished (which currently just means it's in state
    ;; DONE).
    ;;
    ;; If more than one to-do state indicated that a task was finished,
    ;; we'd also have to check that the state on the entry matched the
    ;; one on the headline, but with one finishing state, we get that
    ;; for free, so to speak.
    (and (equal "DONE" (org-ml-get-property :todo-keyword headline))
         (equal 'DONE (first (first strans-entries)))))


  (defun pg-pm--build-accomplishment (headline)
    "Return an accomplishment record for HEADLINE. The
  accomplishment record contains the headline, the transition log
  entry corresponding to the finishing of the accomplishment, and
  all the elements of the transition log entry, as returned by
  `pg-pm--parse-strans-log-entry'.

  If the headline is not, in fact, an accomplishment, this function
  returns nil."
    (let ((logbook-entries (->> headline
                                (pg-pm--headline-logbook-items)
                                (-map #'pg-pm--parse-strans-log-entry))))
      (when (pg-pm--accomplishment? headline logbook-entries)
        (list headline (or (first logbook-entries)
                           (org-ml-get-property :title headline))))))


  (defun pg-pm--accomplishment-headline (accomplishment)
    "Get the headline associated with ACCOMPLISHMENT."
    (-let [(headline _) accomplishment]
      headline))

  (defun pg-pm--accomplishment-strans (accomplishment)
    "Get the state transition entry associated with ACCOMPLISHMENT."
    (-let [(_ strans) accomplishment]
      strans))

  (defun pg-pm--accomplishment-to-string (accomplishment)
    "Render the data structure returned by
    `pg-pm--build-accomplishment' as a string."
    (-let [(headline strans) accomplishment]
      (format "#(\"%s\" %s)"
              (org-ml-to-trimmed-string headline)
              (pg-pm--strans-to-string strans))))
#+end_src

Used thusly:

#+name: t/accomplishment/1
#+begin_src emacs-lisp :noweb eval :tangle no :results drawer :exports code
  <<src/accandidates>>
  <<src/headline-logbook-items>>
  <<src/rx-logbook-resolved>>
  <<src/-parse-strans-log-entry>>
  <<src/accomplishment>>

  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--accandidates)
       (-keep #'pg-pm--build-accomplishment)
       (first)
       (pg-pm--accomplishment-to-string))
#+end_src

As you can see, =pg-pm--build-accomplishment= is both a constructor and a predicate, so we can throw a list of maybe-accomplishments at it and use =-keep= to filter out the non-accomplishments.

**** Org-mode representation of accomplishments

The accomplishment record is convenient for processing, but we'll eventually want to represent accomplishments in Org. Building that now also gives us a "free" string representation. Here's what we're shooting

#+name: src/accomplishment-to-org
#+begin_src emacs-lisp
  (defun pg-pm--accomplishments-build-plain-list (acc-items)
    "Build a plain-list with ACC-ITEMS as a list, not inlined."
    (if acc-items
        (eval `(org-ml-build-plain-list ,@(-map (lambda (x) `(quote ,x)) acc-items)))
      (org-ml-build-plain-list)))


  (defun pg-pm--accomplishments-build-headline (project-name accomplishments)
    "Turn a list of accomplishments to an org-element headline."
    (->> accomplishments
         (-map #'pg-pm--accomplishment-build-item)
         (pg-pm--accomplishments-build-plain-list)
         (org-ml-build-section)
         (org-ml-build-headline
          :title (org-ml-build-secondary-string! project-name))))

  (defun pg-pm--format-time(org-ts)
    (->> (ts-parse-org-element org-ts)
         (ts-format "%d %b")
         (format "/%s/")))

  (defun pg-pm--accomplishment-build-item (accomplishment)
    "Convert ACCOMPLISHMENT, an accomplishment record, to an
    org item representation. If ACCOMPLISHMENT is nil, return
    nil."
    (-let* (((headline (_ _ ts notes)) accomplishment)
            (ts-formatted (pg-pm--format-time ts))
            (notes-formatted (org-ml-to-trimmed-string notes))
            (para-string (format "%s: %s" ts-formatted notes-formatted)))
      (org-ml-build-item! :paragraph para-string)))
#+end_src

This should generate something that looks like:

#+name: ex/accomplishments-to-string
#+begin_src org :tangle no
   ,* DCO Modeling
     - /(Jan 1 2021)/: Extracted workflows from Sari and Chuck's training
   ,* Line Project
     - /(Jan 2 2021)/: Contracting paperwork filed with Finance for external collaborator
#+end_src


Used thusly:

#+name: t/accomplishment-to-string
#+begin_src emacs-lisp :noweb eval :tangle no :results code :exports code
  <<src/accandidates>>
  <<src/headline-logbook-items>>
  <<src/rx-logbook-resolved>>
  <<src/-parse-strans-log-entry>>
  <<src/accomplishment>>
  <<src/accomplishment-to-org>>


  (->> (org-ml-parse-subtrees 'all)
       (pg-pm--accandidates)
       (-keep #'pg-pm--build-accomplishment)
       (first)
       (pg-pm--accomplishment-build-item)
       (org-ml-to-trimmed-string))
#+end_src




**** Building the accomplishment report


Time to build the report.


#+name: src/accomplishment-report
#+begin_src emacs-lisp
  (defun pg-pm--recent-accomplishments? (beg end accomplishment)
    "Return ACCOMPLISHMENT if its timestamp "
    (-let* (((_ (_ _ ts _)) accomplishment)
            (ts (ts-parse-org-element ts)))
      ;; ts-in is beg <= ts <= end, which means a time could be in
      ;; ranges a->b and in b->c. Defining it this way makes binning
      ;; easier. Which I won't be doing, so I don't know why I care, but
      ;; that's the story of my life.
      (when (and (ts< beg ts)
                 (ts>= end ts))
        accomplishment)))

  (defun pg-pm--beginning-time (end time-offset)
    "Return the beginning of a time range ending with END and
    defined relative to END by TIME-OFFSET. Signal an error if
    TIME-OFFSET is net positive (i.e., if the beginning would be
    after the end)."
    (let ((beg (pm-ts-adjust-from-string time-offset end)))
      (if (ts< end beg)
          (error "Beginning time is in the future (use negative offsets)")
        beg)))


  (defun pg-pm--headlines-from-project-file (begin end project-file-name)
    "Return an alist entry of accomplishments, keyed by project name."
    (with-current-buffer (find-file-noselect project-file-name)
      (let ((project-name (pm-project-meta "TITLE" project-file-name)))
        (->> (org-ml-parse-subtrees 'all)
             (pg-pm--accandidates)
             (-keep #'pg-pm--build-accomplishment)
             (-keep (-partial #'pg-pm--recent-accomplishments?
                              begin end))
             (pg-pm--accomplishments-build-headline project-name)))))


  ;;  headline -> section -> plain-list -> [item -> paragraph]


  (defun pg-pm-accomplishment-report (&optional time-offset)
    "Compile an accomplishment report from the tasks that have
  been closed in a time period. Accomplishments are extracted from
  the files returned by `pg-pm-active-projects'.

  If TIME-OFFSET is nil, prompt the user for a time specification,
  indicating how old an accomplishment can be before it is included
  in the report. The syntax for this specification is given in
  `pg-time-spec-from-string'."
    (interactive)
    (let* ((time-offset (or time-offset
                            (read-string "Find since: " "-7d")))
           (end (ts-now))
           (begin (pg-pm--beginning-time end time-offset))
           (toplevel (org-ml-build-section
                      (org-ml-build-keyword "TITLE" "Accomplishments Report")))
           (headlines
            (--map (pg-pm--headlines-from-project-file begin end it)
                   (pg-pm-active-projects)))
           (buff (get-buffer-create "*Accomplishments*")))
      (with-current-buffer buff
        (erase-buffer)
        (cd pg-pm-project-dir)
        (org-mode)
        (org-indent-mode)
        (insert (org-ml-to-string toplevel))
        (--map
         (insert (org-ml-to-string it))
         headlines))
      (switch-to-buffer buff)))



  (defun pg-pm--status-build-string (begin end headlines)
    "Build an org document representing a status report."
    (let* ((fmt "%Y/%m/%d")
           (begin-str (ts-format fmt begin))
           (end-str (ts-format fmt end))
           (the-spec `(org-data
                        (section
                         (keyword "TITLE"
                                  ,(format "pgroce Status %s-%s" begin-str end-str)))
                        (headline! :title-text "Accomplishments"
                                   :section-children ((paragraph! "NSTR")))
                        (headline! :title-text "Status"
                                   ;; headlines is a list of literal org headline
                                   ;; elements. Each one must be quoted so it will
                                   ;; be ignored by org-ml-build.
                                   ,@(--map `(quote ,it) headlines))))
           (the-tree (pg-org-ml-build the-spec)))
      (org-ml-to-trimmed-string the-tree)))





  (defun pg-pm-status-report (&optional time-offset)
    "Compile a status report from the tasks that have been closed in
  a time period. Accomplishments are extracted from the files
  returned by `pg-pm-active-projects'.

  If TIME-OFFSET is nil, prompt the user for a time specification,
  indicating how old an accomplishment can be before it is included
  in the report. The syntax for this specification is given in
  `pg-time-spec-from-string'."
    (interactive)
    (let* ((time-offset (or time-offset
                            (read-string "Find since: " "-7d")))
           (end (ts-now))
           (begin (pg-pm--beginning-time end time-offset))
           (headlines
            (--map (pg-pm--headlines-from-project-file begin end it)
                   (pg-pm-active-projects)))
           (buff (get-buffer-create "*Accomplishments*")))
      (with-current-buffer buff
        (erase-buffer)
        (cd pg-pm-project-dir)
        (org-mode)
        (org-indent-mode)
        (insert (pg-pm--status-build-string begin end headlines)))
      (switch-to-buffer buff)))

#+end_src

***** Testing

We will use a simplified version of the example above, which includes a lot of edge cases.

#+name: input/accomplishments
#+caption: Org-mode snippet
#+begin_src org

  ,* Tasks

  ,** DONE Do a Thing
   :LOGBOOK:
   - State "DONE"       from "DOING"      [2021-08-06 Fri 12:52] \\
     Notes
   - State "DOING"      from "TODO"       [2021-08-06 Fri 11:52] \\
     Notes 2
   - Not a status change [2021-09-15 Wed]
   -
   -
   :END:

  ,** TODO Not a task (yet)
#+end_src



** Reboot

A lot of the foregoing was ad-hoc. A more principled approach would be:

- Query projects for general project and task data
- Format the results of that query in a report

Where both these processes are generalized.

We can see that =org-ml= takes us a lot of the way there, but not all the way. That's mainly because some of the things we're interested in exist "above" the level of the element tree–for instance, the history information in the logbook entries that Org treats as a sequence of secondary strings. It would be very nice if we could use the =org-ml= node selection syntax for the whole search though, instead of relying on regular expressions.

The reporting is basically fine, but separating the document structure from the content a bit more would be nice. There's a reason so many data-based web apps have template engines. And the document itself needs to include more than just "accomplishments."

TODO:

- [3/4] Use =pg-org= constructs for
  - [X] defining tests
  - [X] parsing logbook items
  - [X] matching tasks (via =:-pred= and =:lookahead=)
  - [ ] building the report (via the soon-to-be renamed =org-ml-build=)
- [ ] Reporting API
  - Select tasks with code + declaration
  - Build reports from template
  - Sample queries
    - Accomplishments: Resolved as done within =$duration=
    - Progress: Open tasks with new logbook entries with =$duration=
    - Project status: All open tasks in project, with description and last update
- [ ] GUI
  - Popup buffers for
    - new annotations
      - Action: commit change
    - search results
      - Action: Save tasks into new file
      - Action: Save tasks back to original projects (or into different/new projects, if project reference modified!)
      - Action: Mass updates
        - Change assignee
        - Change parent project
        - Remove from parent project
        - Working on copy, only changes original if saved back to original project
- Additional structure for tasks
  - ~Another drawer for logging things beside status changes~ Nope! Instead, put /everything/ in the logbook!
  - Comments
    - Short comments called /annotations/ are already implemented in the logbook. More elaborate comments implemented as subheads are possible Future Work.
    - ~Changes to the description~ Meh, nothing's easier than just editing it. Nothing programmatic has come up that shouldn't be an event log or metadata change instead. If it does, the section element can be rewritten using Org ML or Org Element.


* Provide


#+BEGIN_SRC emacs-lisp
  (provide 'pm)
  ;;; pm.el ends here
#+END_SRC
