#+STARTUP: indent
#+TITLE: pg-sh: Manage local and remote shells

(Not to be confused with =pg-shell-path=.)

This package contains utility functions for rapidly creating and destroying shell buffers in Emacs, for both local and remote hosts.

This package is organized around the idea is that creating and destroying shells should get out of the way and do what you mean. How that manifests can be slightly different for local shells versus remote ones. (And the liminal space between them, when you're logging in to VMs or containers on your local machine.)

* Package Header



#+BEGIN_SRC emacs-lisp
  ;;; pg-sh.el --- Manage local and remote shells

  ;; Copyright (C) 2017 Phil Groce

  ;; Author: Phil Groce <pgroce@gmail.com>
  ;; Version: 0.1
  ;; Package-Requires: (tramp)
  ;; Keywords: shell

#+END_SRC

* Requires

#+BEGIN_SRC emacs-lisp
  (require 'tramp)
#+END_SRC

* Code

** Local shells

=pg-sh-local= will create a shell buffer with the same cwd as the current buffer, or go to one if it already exists. If, however, you are already /in/ that buffer, calling =pg-sh= will destroy it.

Thus, you can call up a shell with one keystroke, work in it until you are done, and dismiss it with the same keystroke.

The enabling function is also public and callable programmatically. It can be used to create temporary shells for other purposes. (For example, use it to pop up a shell associated with a Projectile project, at the top level of that project's directory tree.)

 #+BEGIN_SRC emacs-lisp
   ;;;###autoload
   (defun pg-sh (&optional context def-dir)
     "Make/destroy a temporary shell, as appropriate.

   Called with no arguments, this function will kill a temp-shell
   buffer if one is the current active buffer; otherwise, it will
   create one associated with the current active buffer, in that
   buffer's default directory.

   CONTEXT is the context with which the shell will be
   associated; by default, it is the name of the current active
   buffer.  If CONTEXT is the name of an existing temporary shell
   buffer, destroy it.  Otherwise, start a new temporary shell
   buffer associated with that context.

   If DEF-DIR is supplied, make that the shell's working directory."
     (interactive)
     (let ((context (if context context (buffer-name))))
       ;; Don't allow the creation of a temp-shell if the associated
       ;; buffer doesn't exist. It can go away later, but requiring it to
       ;; exist now makes things simpler (i.e., we know kill-buffer
       ;; will work).

       ;; If context is the name of a temp-shell buffer, kill it (if it
       ;; exists)
       (if (string-match-p "^\\*temp-shell (" context)
           (if (get-buffer context)
               (let ((kill-buffer-query-functions '()))
                 (kill-buffer))
             (message "Refusing to kill nonexistent temp-shell '%s'" context))
         ;; Otherwise, create a temp-shell for it
         (let ((default-directory (if def-dir
                                      (if (string-match-p "/$" def-dir)
                                          def-dir
                                        (concat def-dir "/"))
                                    default-directory)))
           (shell (concat "*temp-shell (" context ")*"))))))
 #+END_SRC


** Remote shells

The default assumption with remote shells is not that you can just exit the process cleanly, because SSH connections contain multiple channels of communication (e.g., you may be using port forwarding to proxy other connections through this one), and because there may be remote state that needs to be cleaned up. Furthermore, it's common to want multiple remote shells out to another host, where it's less likely you'll want multiple shells closely associated with the same directory.

Therefore, =pg-sh-ssh= does not dismiss the connection if you're already in an SSH buffer, but will instead create another one.

#+BEGIN_SRC emacs-lisp
  (defun pg-sh--ssh-hosts ()
    "Return all the hosts configured in ~/.ssh/config via
    tramp-parse-sconfig."
    ;; tramp-parse-sconfig returns a list of tuples whose cars are
    ;; always nil. The cdr is often nil, too, so the thing ends up
    ;; looking like:
    ;;
    ;;  '(nil nil nil (nil "foo") nil (nil "bar")...)
    ;;
    ;; This function, given that, would return: '("foo" "bar")
    (let ((not-nil-p (lambda (x) (not (equal x nil)))))
      (mapcar
       'car
       (cl-remove-if-not
        not-nil-p
        (mapcar 'cdr (tramp-parse-sconfig "~/.ssh/config"))))))

  (defun pg-sh--make-dumb-remote-terminal (remote-host)
    "Make a remote connection via ssh. REMOTE-HOST is presumed to
    be sufficient to `ssh' to figure things out."
    (let* ((bdir (format "ssh:%s" remote-host))
           (bname (generate-new-buffer-name bdir))
           (buff (make-term bname "ssh" nil remote-host)))
      (set-buffer buff)
      (setq default-directory (format "/%s:" bdir))
      (term-mode)
      (term-char-mode)
      (term-set-escape-char ?\C-x)
      (switch-to-buffer buff)))

  ;;;###autoload
  (defun pg-sh-ssh ()
    (interactive)
    "Make a remote terminal from an SSH configuration entry. The
    entry name is presumed to be sufficient to initiate the SSH
    connection."
    (pg-sh--make-dumb-remote-terminal
     (completing-read "SSH config entry: " (pg-sh--ssh-hosts))))
#+END_SRC


* Provides

#+BEGIN_SRC emacs-lisp
  (provide 'pg-sh)
  ;;; pg-sh.el ends here
#+END_SRC
